%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.9.5 (Build 13F34) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 358 95
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
{ld}repeat pop
/SC{	
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		
/cm {cmmtx astore CM concat}bd	
/W{clip newpath}bd
/W*{eoclip newpath}bd
statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	
    true
}{
    pop	
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse
{	
    { 
	{ 
	    pop pop 
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd
/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd
/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd
/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	
dict begin
{def} repeat
pop		
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	
}bd
/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ 
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ 
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		
/cp_proc/x_proc ld 	
/base_charpath		
{
    /t_array xs
    /t_i 0 def
    { 
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ 
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ 
findfont dup length dict copy definefont pop
}bd
L3? dup dup{save exch}if
/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def
/setupFunEval 
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   
		    
	[ 
	    0 1 nRange 1 sub
	    { 
		    2 mul/nDim2 xd		
		    Range nDim2 get		
		    Range nDim2 1 add get	
		    1 index sub			
						
		    255 div			
		    exch			
	    }for
	]store
    end
}bd
/FunEval 
{
    begin
	
	nRange mul /val xd	
				
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd 
	    val	
	    add DataSource exch get 
	    mulRange nDim2 get mul 	
	    mulRange nDim2 1 add get 
	    add 
	}for	
    end
}bd
/max 
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd
/sh2
{	
	/Coords load aload pop 	
	3 index 3 index translate	
					
	3 -1 roll sub	
	3 1 roll exch 	
	sub				
	2 copy
	dup mul exch dup mul add sqrt	
	dup
	scale  
	atan	
	
	rotate		
	
	/Function load setupFunEval	
	
	
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	
	grestore	
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd
/shp	
{	
	4 copy
	
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
	
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd
/calcmaxs
{	
	
	xmin dup mul ymin dup mul add sqrt		
	xmax dup mul ymin dup mul add sqrt		
	xmin dup mul ymax dup mul add sqrt		
	xmax dup mul ymax dup mul add sqrt		
	max max max								
}bd
/sh3
{	
	/Coords load aload pop 	
	5 index 5 index translate	
	3 -1 roll 6 -1 roll sub		
	3 -1 roll 5 -1 roll sub		
	2 copy dup mul exch dup mul add sqrt
	/dx xs						
	2 copy 0 ne exch 0 ne or
	{
		
		exch atan rotate	
	}{
		pop pop
	}ifelse
	
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	
	/Nsteps xs		
	setupFunEval		
	
	
	
	
	
	dx r2 add r1 lt{
		
		0 
	}{
		dx r1 add r2 le
		{ 
			1
		}{ 
			r1 r2 eq
			{	
				2
			}{ 
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		
	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	
		{	
			0/Function load FunEval sc	
			
			
			
			
			{ 
				{	
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				}
				{	
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	
					
					
				
					
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	
					
				
					r2 r1 gt{	
						
						0 r1
						r1 neg r2 r1 sub div dx mul	
						0	
						shp	
					}{	
						
						
						
						0 r1 calcmaxs	
						dup
						
						r2 add dx mul dx r1 r2 sub sub div
						neg				
						exch 1 index	
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	
		}if
	}if
	
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	
	
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	
		{	
			Nsteps/Function load FunEval sc	
			
			
			
			
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				} 
				{	
					
					
					xmax abs r1 add r1 dx r1 shp
				}	
				{	
			
					r2 r1 gt{
						
						
						
						calcmaxs dup	
						
						r1 add dx mul dx r2 r1 sub sub div	
						exch 1 index	
						exch sub
						dx r2
						shp
					}{	
						
						r1 neg r2 r1 sub div dx mul	
						0		
						dx 		
						r2		
						shp
					}ifelse
				}
			}			
			sh3tp get exec	
		}if
	}if
}bd
/sh		
{	
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	
					2 index sub				
					3 index					
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd
{restore}if not dup{save exch}if
	L3?{	
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if
end
setpacking
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 358 95
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9496 1.0000 1.0890 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4106 0.2119 0.0194 0.3583 0.7166 0.1202 0.1807 0.0716 0.9494 ] def 
/RangeLMN [ 0.0 0.9496 0.0 1.0000 0.0 1.0890 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.20126396 0.22604349 0.24622533 sc
q
0 71.162003 m
0 81.633003 l
46.400002 81.633003 l
46.400002 71.162003 l
29.426001 71.162003 l
29.426001 25 l
16.974001 25 l
16.974001 71.162003 l
0 71.162003 l
W*
0 0 358 95 rc
-5 86.633003 m
51.400002 86.633003 l
51.400002 20 l
-5 20 l
h
-5 86.633003 m
f*
Q
q
58.251999 12.785 m
56.083 11.357 53.069 10.644 49.209999 10.644 c
48.046001 10.644 46.896 10.684 45.759998 10.764 c
44.622002 10.843 43.472 10.936 42.310001 11.041 c
42.310001 20.32 l
43.367001 20.215 44.451 20.108999 45.562 20.004 c
46.672001 19.898001 47.782001 19.872 48.893002 19.924 c
50.372002 20.082001 51.471001 20.665001 52.185001 21.669001 c
52.897999 22.674 53.255001 23.784 53.255001 25 c
53.255001 25.898001 53.096001 26.746 52.778999 27.539 c
38.423 66.007004 l
50.400002 66.007004 l
59.68 37.929001 l
59.838001 37.929001 l
68.801003 66.007004 l
80.459999 66.007004 l
63.327999 19.924 l
62.111 16.594 60.418999 14.214 58.251999 12.785 c
W*
0 0 358 95 rc
33.423 71.007004 m
85.459999 71.007004 l
85.459999 5.6440001 l
33.423 5.6440001 l
h
33.423 71.007004 m
f*
Q
q
95.167999 66.007004 m
95.167999 60.771999 l
95.327003 60.771999 l
96.700996 62.993 98.445999 64.606003 100.561 65.610001 c
102.676 66.613998 105.003 67.116997 107.542 67.116997 c
110.766 67.116997 113.542 66.509003 115.87 65.292999 c
118.196 64.075996 120.126 62.463001 121.66 60.455002 c
123.193 58.445 124.329 56.105 125.07 53.435001 c
125.81 50.764 126.181 47.974998 126.181 45.067001 c
126.181 42.317001 125.81 39.674 125.07 37.136002 c
124.329 34.598 123.206 32.349998 121.699 30.393999 c
120.192 28.438 118.315 26.877001 116.068 25.715 c
113.82 24.552 111.19 23.969 108.176 23.969 c
105.638 23.969 103.298 24.483999 101.157 25.516001 c
99.014999 26.547001 97.255997 28.066 95.882004 30.076 c
95.723 30.076 l
95.723 10.004 l
84.459999 10.004 l
84.459999 66.007004 l
95.167999 66.007004 l
95.167999 66.007004 l
h
109.807 33.526001 m
111.049 34.265999 112.054 35.230999 112.821 36.421001 c
113.587 37.611 114.13 38.998001 114.447 40.584999 c
114.765 42.172001 114.923 43.784 114.923 45.424 c
114.923 47.063 114.751 48.675999 114.408 50.262001 c
114.063 51.848 113.496 53.263 112.702 54.506001 c
111.909 55.747002 110.891 56.751999 109.648 57.52 c
108.406 58.285 106.885 58.669998 105.088 58.669998 c
103.236 58.669998 101.69 58.285 100.448 57.52 c
99.205002 56.751999 98.199997 55.759998 97.433998 54.544998 c
96.667 53.327999 96.125999 51.928001 95.807999 50.341999 c
95.490997 48.756001 95.332001 47.115002 95.332001 45.424 c
95.332001 43.784 95.502998 42.172001 95.848 40.584999 c
96.191002 38.998001 96.746002 37.611 97.513 36.421001 c
98.278999 35.230999 99.297997 34.265999 100.567 33.526001 c
101.836 32.785 103.369 32.416 105.167 32.416 c
107.018 32.416 108.564 32.785 109.807 33.526001 c
109.807 33.526001 l
h
109.807 33.526001 m
W*
0 0 358 95 rc
79.459999 72.116997 m
131.181 72.116997 l
131.181 5.0040002 l
79.459999 5.0040002 l
h
79.459999 72.116997 m
f*
Q
q
144.21899 34.835999 m
145.911 33.195999 148.34399 32.376999 151.51601 32.376999 c
153.78999 32.376999 155.746 32.944 157.386 34.082001 c
159.024 35.219002 160.02901 36.422001 160.399 37.691002 c
170.314 37.691002 l
168.72701 32.772999 166.29401 29.256001 163.017 27.143 c
159.73801 25.027 155.77299 23.969 151.12 23.969 c
147.894 23.969 144.985 24.483999 142.396 25.516001 c
139.804 26.547001 137.60899 28.014 135.813 29.917999 c
134.015 31.820999 132.627 34.095001 131.64799 36.737999 c
130.66901 39.382999 130.181 42.291 130.181 45.464001 c
130.181 48.529999 130.683 51.384998 131.688 54.028999 c
132.692 56.674 134.12 58.959999 135.97099 60.890999 c
137.821 62.82 140.028 64.341003 142.59399 65.450996 c
145.158 66.563004 147.99899 67.116997 151.12 67.116997 c
154.61 67.116997 157.64999 66.443001 160.24001 65.095001 c
162.83099 63.745998 164.96001 61.933998 166.625 59.661999 c
168.291 57.388 169.493 54.796001 170.23399 51.889 c
170.974 48.979 171.23801 45.939999 171.02699 42.768002 c
141.44299 42.768002 l
141.60201 39.118999 142.52699 36.474998 144.21899 34.835999 c
144.21899 34.835999 l
h
156.95 56.409 m
155.601 57.889999 153.55099 58.631001 150.80299 58.631001 c
149.004 58.631001 147.511 58.326 146.321 57.719002 c
145.131 57.109001 144.17999 56.355999 143.466 55.458 c
142.752 54.558998 142.24899 53.605 141.96001 52.602001 c
141.668 51.598 141.496 50.699001 141.44299 49.905998 c
159.765 49.905998 l
159.23599 52.762001 158.297 54.928001 156.95 56.409 c
156.95 56.409 l
h
156.95 56.409 m
W*
0 0 358 95 rc
125.181 72.116997 m
176.09729 72.116997 l
176.09729 18.969 l
125.181 18.969 l
h
125.181 72.116997 m
f*
Q
q
171.16701 58.472 m
171.16701 66.007004 l
177.908 66.007004 l
177.908 69.18 l
177.908 72.828003 179.04401 75.815002 181.319 78.142998 c
183.592 80.469002 187.02901 81.633003 191.629 81.633003 c
192.633 81.633003 193.63901 81.592003 194.64301 81.514 c
195.647 81.433998 196.62601 81.366997 197.578 81.315002 c
197.578 72.907997 l
196.256 73.065002 194.882 73.146004 193.45399 73.146004 c
191.92 73.146004 190.823 72.788002 190.162 72.073997 c
189.5 71.361 189.17101 70.156998 189.17101 68.464996 c
189.17101 66.007004 l
196.944 66.007004 l
196.944 58.472 l
189.17101 58.472 l
189.17101 25 l
177.908 25 l
177.908 58.472 l
171.16701 58.472 l
W*
0 0 358 95 rc
166.16701 86.633003 m
202.578 86.633003 l
202.578 20 l
166.16701 20 l
h
166.16701 86.633003 m
f*
Q
q
198.43401 54.387001 m
199.437 57.056999 200.86501 59.331001 202.716 61.209 c
204.56599 63.084 206.787 64.539001 209.379 65.57 c
211.96899 66.601997 214.877 67.116997 218.103 67.116997 c
221.327 67.116997 224.25101 66.601997 226.869 65.57 c
229.487 64.539001 231.722 63.084 233.571 61.209 c
235.423 59.331001 236.851 57.056999 237.855 54.387001 c
238.858 51.716999 239.362 48.742001 239.362 45.464001 c
239.362 42.185001 238.858 39.223999 237.855 36.580002 c
236.851 33.935001 235.423 31.676001 233.571 29.799 c
231.722 27.922001 229.487 26.48 226.869 25.476999 c
224.25101 24.473 221.327 23.969 218.103 23.969 c
214.877 23.969 211.96899 24.473 209.379 25.476999 c
206.787 26.48 204.56599 27.922001 202.716 29.799 c
200.86501 31.676001 199.437 33.935001 198.43401 36.580002 c
197.42799 39.223999 196.92599 42.185001 196.92599 45.464001 c
196.92599 48.742001 197.42799 51.716999 198.43401 54.387001 c
198.43401 54.387001 l
h
208.66499 40.666 m
208.98199 39.105999 209.524 37.702999 210.29201 36.462002 c
211.05701 35.219002 212.076 34.227001 213.345 33.487 c
214.61301 32.745998 216.2 32.376999 218.103 32.376999 c
220.007 32.376999 221.606 32.745998 222.901 33.487 c
224.196 34.227001 225.228 35.219002 225.995 36.462002 c
226.76199 37.702999 227.30499 39.105999 227.62399 40.666 c
227.94 42.224998 228.099 43.824001 228.099 45.464001 c
228.099 47.102001 227.94 48.716999 227.62399 50.303001 c
227.30499 51.889 226.76199 53.289001 225.995 54.506001 c
225.228 55.721001 224.196 56.713001 222.901 57.480999 c
221.606 58.245998 220.007 58.631001 218.103 58.631001 c
216.2 58.631001 214.61301 58.245998 213.345 57.480999 c
212.076 56.713001 211.05701 55.721001 210.29201 54.506001 c
209.524 53.289001 208.98199 51.889 208.66499 50.303001 c
208.34801 48.716999 208.189 47.102001 208.189 45.464001 c
208.189 43.824001 208.34801 42.224998 208.66499 40.666 c
208.66499 40.666 l
h
208.66499 40.666 m
W*
0 0 358 95 rc
191.92599 72.116997 m
244.362 72.116997 l
244.362 18.969 l
191.92599 18.969 l
h
191.92599 72.116997 m
f*
Q
q
254.13499 66.007004 m
254.13499 58.393002 l
254.293 58.393002 l
254.82001 59.661999 255.535 60.838001 256.43399 61.922001 c
257.332 63.006001 258.36301 63.931999 259.52701 64.696999 c
260.69101 65.463997 261.93399 66.058998 263.25601 66.482002 c
264.57599 66.904999 265.95099 67.116997 267.379 67.116997 c
268.121 67.116997 268.94 66.984001 269.84 66.721001 c
269.84 56.250999 l
269.31 56.355999 268.67401 56.449001 267.935 56.528 c
267.19299 56.606998 266.48099 56.647999 265.793 56.647999 c
263.73001 56.647999 261.98599 56.303001 260.55899 55.616001 c
259.13101 54.928001 257.98001 53.990002 257.10901 52.800999 c
256.23599 51.611 255.61301 50.223 255.244 48.637001 c
254.875 47.050999 254.69 45.332001 254.69 43.48 c
254.69 25 l
243.42799 25 l
243.42799 66.007004 l
254.13499 66.007004 l
W*
0 0 358 95 rc
238.42799 72.116997 m
274.84 72.116997 l
274.84 20 l
238.42799 20 l
h
238.42799 72.116997 m
f*
Q
q
284.46799 66.007004 m
284.46799 60.455002 l
284.62601 60.455002 l
286.10599 62.568001 287.892 64.209 289.98099 65.373001 c
292.069 66.533997 294.46201 67.116997 297.159 67.116997 c
299.74899 67.116997 302.116 66.613998 304.25699 65.610001 c
306.39801 64.606003 308.02399 62.834 309.13599 60.296001 c
310.35101 62.094002 312.00299 63.68 314.09299 65.055 c
316.181 66.43 318.65302 67.116997 321.509 67.116997 c
323.677 67.116997 325.685 66.851997 327.53601 66.323997 c
329.388 65.794998 330.974 64.947998 332.29599 63.785999 c
333.616 62.622002 334.647 61.102001 335.39001 59.226002 c
336.12799 57.348 336.49899 55.087002 336.49899 52.443001 c
336.49899 25 l
325.23499 25 l
325.23499 48.240002 l
325.23499 49.615002 325.18301 50.91 325.077 52.126999 c
324.97198 53.341999 324.681 54.398998 324.20401 55.299 c
323.729 56.196999 323.02802 56.910999 322.104 57.441002 c
321.177 57.969002 319.923 58.234001 318.33701 58.234001 c
316.74899 58.234001 315.46799 57.929001 314.48901 57.321999 c
313.509 56.713001 312.74301 55.919998 312.189 54.942001 c
311.634 53.963001 311.263 52.853001 311.07901 51.611 c
310.892 50.367001 310.802 49.112999 310.802 47.844002 c
310.802 25 l
299.53799 25 l
299.53799 48.001999 l
299.53799 49.219002 299.51099 50.421001 299.45801 51.611 c
299.405 52.800999 299.181 53.897999 298.784 54.902 c
298.388 55.905998 297.72601 56.713001 296.802 57.321999 c
295.87601 57.929001 294.513 58.234001 292.716 58.234001 c
292.186 58.234001 291.487 58.115002 290.61401 57.876999 c
289.741 57.639 288.896 57.189999 288.077 56.528 c
287.25699 55.867001 286.556 54.915001 285.974 53.674 c
285.392 52.43 285.103 50.805 285.103 48.794998 c
285.103 25 l
273.83899 25 l
273.83899 66.007004 l
284.46799 66.007004 l
W*
0 0 358 95 rc
268.83899 72.116997 m
341.49899 72.116997 l
341.49899 20 l
268.83899 20 l
h
268.83899 72.116997 m
f*
Q
0.53849196 0.7749362 0.74473232 sc
q
348 95 m
358 95 l
358 0 l
348 0 l
348 95 l
h
348 95 m
W*
0 0 358 95 rc
343 100 m
363 100 l
363 -5 l
343 -5 l
h
343 100 m
f*
ep
end
