<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Snippets on James Doyle</title>
    <link>https://ohdoylerules.com/category/snippets/</link>
    <description>Recent content in Snippets on James Doyle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>james2doyle@gmail.com (James Doyle)</managingEditor>
    <webMaster>james2doyle@gmail.com (James Doyle)</webMaster>
    <copyright>This work is licensed under The MIT License (MIT).</copyright>
    <lastBuildDate>Sat, 03 Jun 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ohdoylerules.com/category/snippets/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Color Helpers In Fish Shell</title>
      <link>https://ohdoylerules.com/snippets/color-helpers-in-fish-shell/</link>
      <pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/color-helpers-in-fish-shell/</guid>
      <description>&lt;p&gt;I am one of those people who likes a lot of colors in my shell. When there is a failure, I like to see red. If there is something stuccessful, I like to see green.&lt;/p&gt;
&lt;p&gt;Working with the prompt to output the correct colors can be a bit of a pain. I manage to find a nice way to handle both colorizing backgrounds for the text as well as the actual text color. You can see an example below:&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/james2doyle/acb8c065c8b4d63f557d44a77a356d59.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;Once you add the code into your &lt;code&gt;fish config&lt;/code&gt;. You will then be able to colorize your output using this simple helper function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fish&#34; data-lang=&#34;fish&#34;&gt;color_print &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$COLOR_R&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;I am red text.&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also do a background color:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fish&#34; data-lang=&#34;fish&#34;&gt;color_print &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$BG_G&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;I am on a green background.&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I use this helper function in my other functions to colorize output when showing different results or handling different exit codes.&lt;/p&gt;
&lt;p&gt;Here is an exmple of a little function that moves a file and timestamps it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fish&#34; data-lang=&#34;fish&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; amv
  &lt;span style=&#34;color:#ff79c6&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$argv&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$source&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;set&lt;/span&gt; stamp &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;date +%Y-%m-%d-%H-%M-%S&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;set&lt;/span&gt; dest &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$stamp&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$source&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;
    mv &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$source&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$dest&lt;/span&gt;
    &lt;span style=&#34;color:#6272a4&#34;&gt;# output will be blue text
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    color_print &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$COLOR_B&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Moved &lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$source&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; to an archive at &lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$dest&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;
    &lt;span style=&#34;color:#6272a4&#34;&gt;# output will be yellow text
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    color_print &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$COLOR_Y&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Help: amv source.zip {timestamp}-source.zip&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So you can see where this can be really helpful for when you just want to simply color some text. Instead of worrying about the color codes and escape sequences, you can use this handy helper function now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install the latest Node.js on Amazon Linux</title>
      <link>https://ohdoylerules.com/snippets/install-latest-nodejs-on-amazon-linux/</link>
      <pubDate>Sat, 29 Apr 2017 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/install-latest-nodejs-on-amazon-linux/</guid>
      <description>&lt;p&gt;Installing the latest version of Node.js on the Amazon linux AMI can actually be a little painful.&lt;/p&gt;
&lt;p&gt;Here is a script for doing just that.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/james2doyle/a1f0b415dee4e69b3595b7af1d07e7c1.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;Hopefully, sometime soon, Amazon will stop using &lt;code&gt;0.10.*&lt;/code&gt; and start using a &lt;code&gt;x.*&lt;/code&gt; version by default.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running Go (golang) in Docker</title>
      <link>https://ohdoylerules.com/snippets/running-go-in-docker/</link>
      <pubDate>Fri, 28 Apr 2017 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/running-go-in-docker/</guid>
      <description>&lt;p&gt;Lately, I have been trying to learn golang. This means playing with a lot of tools and busting up my local environment.&lt;/p&gt;
&lt;p&gt;In order to keep things simple, I have been using Docker container to run my applications when I am ready to deploy or build them.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/james2doyle/6489d3e60d994222ce0404c8cd500a93.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;I use &lt;a href=&#34;https://zeit.co/now&#34;&gt;now.sh&lt;/a&gt; to deploy the applications. Since now.sh support deploying Docker, using the Dockerfile approach makes it really simple to deploy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Backup MySQL And Email It</title>
      <link>https://ohdoylerules.com/snippets/backup-mysql-and-email-it/</link>
      <pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/backup-mysql-and-email-it/</guid>
      <description>&lt;p&gt;Recently, a friend of mine asked me what we use for managing the backups for our clients. I mentioned that we use &lt;code&gt;mysqldump&lt;/code&gt; running on a &lt;code&gt;CRON&lt;/code&gt; schedule. He said that he used a paid service for managing all the servers and their backups. He mentioned it sends to an Amazon S3 bucket, and also sends a notification.&lt;/p&gt;
&lt;p&gt;With my setup, he noted that I could be in trouble if the hard drive failed, or the site gets wiped because my backups are stored locally right beside the site itself.&lt;/p&gt;
&lt;p&gt;I thought to myself, &amp;ldquo;Hmmm. What would help me back these files up, let me know that it is done, access them quickly, and also cost no money?&amp;rdquo;. Email + &lt;code&gt;CRON&lt;/code&gt;. Email is a pretty reasonable solution for this.&lt;/p&gt;
&lt;p&gt;With Email, you get the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A notification of when the backup is done&lt;/li&gt;
&lt;li&gt;An &amp;ldquo;offsite&amp;rdquo; backup of the file&lt;/li&gt;
&lt;li&gt;A searchable history of the files/backups&lt;/li&gt;
&lt;li&gt;Forwarding of the backup to someone else&lt;/li&gt;
&lt;li&gt;CC multiple accounts and have the backup available to multiple people&lt;/li&gt;
&lt;li&gt;Send a copy to the client, so they can have one too&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I whipped up a script with &lt;code&gt;mysqldump&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, and &lt;code&gt;CRON&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Although you can send email &lt;code&gt;sendmail&lt;/code&gt; or &lt;code&gt;mail&lt;/code&gt;, I opted for &lt;a href=&#34;http://www.mailgun.com/&#34;&gt;Mailgun&lt;/a&gt;. It is something we are already using, so hooking it up took no time at all. They also have an excellent API, which is faster than &lt;em&gt;SMTP&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;On top of the regular email features I listed above, with Mailgun, I also get:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read receipts&lt;/li&gt;
&lt;li&gt;delivery reports&lt;/li&gt;
&lt;li&gt;logging&lt;/li&gt;
&lt;li&gt;web hooks (you can catch emails with individual subjects or recipients)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, without spending any money, I can get a SaaS experience using some built-in tools.&lt;/p&gt;
&lt;p&gt;You can see the script here:&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/james2doyle/6e471dee73124eddda8c.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;I included some rules for the &lt;code&gt;crontab&lt;/code&gt; settings. I used &lt;code&gt;0 0 * * 1 *&lt;/code&gt; which is once a week on Monday at midnight.&lt;/p&gt;
&lt;p&gt;You can still run the script above &lt;em&gt;without using &lt;code&gt;CRON&lt;/code&gt;&lt;/em&gt;. Just put it somewhere on your server and run it like you normally would: &lt;code&gt;./backup-mysql-db.sh&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Validate Email With Lua</title>
      <link>https://ohdoylerules.com/snippets/validate-email-with-lua/</link>
      <pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/validate-email-with-lua/</guid>
      <description>&lt;p&gt;Checking if an email is valid should be easy, right? WRONG.&lt;/p&gt;
&lt;p&gt;This took about 3-4 hours to finally get. I scoured the web for a good email validation function. But, I was unable to find any that actually handled all the valid email variations.&lt;/p&gt;
&lt;p&gt;If you didn&amp;rsquo;t know, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Email_address#Examples&#34;&gt;spec for email&lt;/a&gt; is actually pretty complex. It allows a lot more than just a web-safe prefix and a domain sandwiched between an &lt;code&gt;@&lt;/code&gt; symbol. You can use quotes, brackets, escapes, and more &lt;code&gt;@&lt;/code&gt; symbols.&lt;/p&gt;
&lt;p&gt;Looking at the results that Wikipedia gives me for emails that should fail or pass a validation, I knew this would require more than just a simple pattern match.&lt;/p&gt;
&lt;p&gt;Here is the final product. I added some nice comments to explain some of the rules as well.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/james2doyle/67846afd05335822c149.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;You can see there is a lot more logic than expected. I also made this function have multiple returns.&lt;/p&gt;
&lt;p&gt;If the email passes the function returns &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt;, but if it fails, it will return &lt;code&gt;nil&lt;/code&gt; and the reason that the validation failed. Pretty slick!&lt;/p&gt;
&lt;p&gt;Anyway, this was a tedious task. So go forth and leverage my pain in your next form submission.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple PHP JSON Response</title>
      <link>https://ohdoylerules.com/snippets/simple-php-json-response/</link>
      <pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/simple-php-json-response/</guid>
      <description>&lt;p&gt;This is little snippet I use all the time when I am building simple flat sites that need a single route for an AJAX request.&lt;/p&gt;
&lt;p&gt;There are a couple of things you need to do in order to create a proper JSON response.&lt;/p&gt;
&lt;h4 id=&#34;use-json_encode&#34;&gt;Use json_encode&lt;/h4&gt;
&lt;p&gt;If you are really new to PHP, you may not have found &lt;a href=&#34;http://php.net/manual/en/function.json-encode.php#refsect1-function.json-encode-examples&#34;&gt;json_encode&lt;/a&gt;. If that is the case, then look it up right now.&lt;/p&gt;
&lt;p&gt;This function converts PHP arrays, strings, and objects, into a JSON safe string. This makes it simple for you to create safe responses that can be handled by your javascript.&lt;/p&gt;
&lt;h4 id=&#34;use-content-type&#34;&gt;Use Content-Type&lt;/h4&gt;
&lt;p&gt;This is usually the magic command that allows you to &lt;em&gt;receive&lt;/em&gt; JSON from your script. If you don&amp;rsquo;t set the header, PHP will simple return a string. Then in your javascript, you have to use &lt;code&gt;JSON.parse&lt;/code&gt; in order to get the object that javascript can use.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;header(&amp;#39;Content-Type: application/json&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;No more strings! The request is now treated accordingly and is parsed for you. I am sure everyone has encountered this in the beginning.&lt;/p&gt;
&lt;h4 id=&#34;use-status&#34;&gt;Use Status&lt;/h4&gt;
&lt;p&gt;Here is another header that you need to set in order for things to work smoothly. By setting the status, you can tell your javascript, as well as your browser, what the status of the request it. By default, the requests are treated as &lt;code&gt;200 OK&lt;/code&gt;. So although you may have sent a response with a failing message, with setting a failed status (usually 300 codes and above) the browser, and your javascript, think everything is fine.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;header(&amp;#39;Status: 400 Bad Request&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This becomes very apparent in jQuery when using &lt;code&gt;$.get&lt;/code&gt; or &lt;code&gt;$.post&lt;/code&gt;. If you are using a Promise style request (using &lt;code&gt;$.get().then( ... )&lt;/code&gt;), your error handler never gets called.&lt;/p&gt;
&lt;p&gt;If you want to find the perfect header for your fantastic error, check out the Wikipedia for the &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_HTTP_status_codes&#34;&gt;HTTP status codes&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;
&lt;p&gt;Here is an example of a simple script I might use when testing an AJAX response, or when building a flat-file site. I would place this somewhere in my websites directory, and then hit it directly with an AJAX request.&lt;/p&gt;
&lt;p&gt;If my local path to my site was &lt;code&gt;http://localhost:8888/website&lt;/code&gt;, I would save this script as &lt;code&gt;json.php&lt;/code&gt;. Then I would then use the following jQuery to test the script:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$.get(&amp;quot;http://localhost:8888/website/json.php&amp;quot;)
.done(function(response){
  console.log(response);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If everything was organized correctly, I should get a successful response with the information I wanted.&lt;/p&gt;
&lt;p&gt;Here is the script:&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/james2doyle/33794328675a6c88edd6.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;You could always add more HTTP status codes, or use different key names for the array response. I like &lt;code&gt;status&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt; because I may have a successful response, but I know something else went wrong when the &lt;code&gt;status&lt;/code&gt; is false. I usually put whatever data I need in &lt;code&gt;message&lt;/code&gt;. If message is a string, I know there is actually a message and not data I need to handle.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easy FFmpeg Video Posters</title>
      <link>https://ohdoylerules.com/snippets/easy-ffmpeg-video-posters/</link>
      <pubDate>Thu, 19 Mar 2015 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/easy-ffmpeg-video-posters/</guid>
      <description>&lt;p&gt;A week ago I was tasked with uploading about 20 different videos to a CMS. Normally for the HTML5 Video element to look nice, you should upload a &lt;a href=&#34;http://www.w3.org/TR/2012/WD-html5-20121025/the-video-element.html#attr-video-poster&#34;&gt;poster image&lt;/a&gt; so that there can be something showing before the video starts to play.&lt;/p&gt;
&lt;p&gt;In my case, I had to generate a poster for each of these 20 videos. This would have taken a long time, so I scripted it using FFmpeg!&lt;/p&gt;
&lt;p&gt;Here is the script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# take in mp4, take screenshot at 5 seconds&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# output same filename, but with jpg extension&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; FILE in *.mp4
  &lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#6272a4&#34;&gt;# save the filename but swap the extension&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;NEWFILE&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;FILE&lt;/span&gt;%.mp4&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;.jpg&amp;#34;&lt;/span&gt;
    ffmpeg -y -i &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$FILE&lt;/span&gt; -f mjpeg -vframes &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; -ss &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$NEWFILE&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;If your videos are not mp4 format, just change the extension.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To use this script:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;save this script as &lt;code&gt;poster.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;put it in the folder with all your video files&lt;/li&gt;
&lt;li&gt;own the script with &lt;code&gt;chmod +x poster.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;run the script with &lt;code&gt;./poster.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should see a bunch of text fly in your command line, and a couple of seconds later, the conversion should be done. You will see some nice little posters right beside your videos! And, they will all be nicely named too!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PhalconPHP Crop Image To Fit</title>
      <link>https://ohdoylerules.com/snippets/phalconphp-crop-to-fit/</link>
      <pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/phalconphp-crop-to-fit/</guid>
      <description>&lt;p&gt;I was trying to find out how to crop-to-fit an image with &lt;code&gt;GD&lt;/code&gt;. But there were no examples with Phalcon. There was one post that mentioned using &lt;code&gt;Imagick&lt;/code&gt;. The only problem was that you needed to compiled Imagick with &lt;code&gt;--lrf&lt;/code&gt; in order to use &lt;code&gt;liquidRescale&lt;/code&gt;. This may not be an option on many hosting platforms. For that reason, I wanted to use &lt;code&gt;GD&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;I &lt;a href=&#34;http://salman-w.blogspot.com/2009/04/crop-to-fit-image-using-aspphp.html&#34; title=&#34;Crop-To-Fit an Image Using ASP/PHP&#34;&gt;found this post&lt;/a&gt; after a quick Google search. It helped me create the base for my Phalcon version of the function. This may seem pretty easy for some people, but I found enough people asking, that I figured I would share the whole code.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/james2doyle/13a36401d6249729d017.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;If you really wanted to use Imagick, then you could just replace GD in the constructor (&lt;code&gt;Phalcon\Image\Adapter\Imagick($source)&lt;/code&gt;) and it should work fine. This way you don&amp;rsquo;t need to compile Imagick from source in order to get &lt;code&gt;liquidRescale&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Node.js in an AppleScript</title>
      <link>https://ohdoylerules.com/snippets/using-node-in-applescript/</link>
      <pubDate>Sat, 12 Jul 2014 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/using-node-in-applescript/</guid>
      <description>&lt;p&gt;A few days ago, I wrote an article about &lt;a href=&#34;https://ohdoylerules.com/snippets/copy-file-path-clipboard-osx&#34; title=&#34;Copy filepath to clipboard in OSX&#34;&gt;how to create a service in Automator to copy the selected file&amp;rsquo;s path to the clipboard while in the Finder.app&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was playing around some more and thought it would be cool to be able to right click and convert a markdown file to HTML. This can be useful for lazy people who don&amp;rsquo;t want to open and app or terminal just to convert.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here is the trick, you need absolute paths to node and the target module (or bin entry js file) file you are trying to run&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-applescript&#34; data-lang=&#34;applescript&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;-- setup some valid extensions for markdown files&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;property&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;validExtensions&lt;/span&gt; : {&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;md&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;markdown&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mdown&amp;#34;&lt;/span&gt;}
&lt;span style=&#34;color:#ff79c6&#34;&gt;tell&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;application&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Finder&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;theFile&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;selection&lt;/span&gt;)
  &lt;span style=&#34;color:#6272a4&#34;&gt;-- check if the extension is correct&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extension&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;theFile&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;is in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;validExtensions&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;selectedItem&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;selection&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;as &lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;text&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;thePath&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;POSIX&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;selectedItem&lt;/span&gt;
    &lt;span style=&#34;color:#6272a4&#34;&gt;-- created a quoted path in case there are special characters&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;nicePath&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;quoted form&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;thePath&lt;/span&gt;
    &lt;span style=&#34;color:#6272a4&#34;&gt;-- here is the trick, you need absolute paths to node and the target bin&lt;/span&gt;
    &lt;span style=&#34;color:#6272a4&#34;&gt;-- just tack on the extension for html&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;do shell script&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/usr/local/bin/node /usr/local/share/npm/bin/marked --gfm &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;nicePath&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; &amp;gt; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;nicePath&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.html&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#6272a4&#34;&gt;-- find out what the new file is called&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;outName&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;to&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;do shell script&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;basename &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;nicePath&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.html &amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; result
    &lt;span style=&#34;color:#6272a4&#34;&gt;-- since there is no progress, let me know when your done&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;display&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;notification&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;outName&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; created successfully&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;title&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Markdown Conversion Finished&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#6272a4&#34;&gt;-- allow time for the notification to show&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;delay&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;
    &lt;span style=&#34;color:#6272a4&#34;&gt;-- wrong file so show this&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;display dialog&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;the file is not a valid Markdown file&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;title&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Conversion Error&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#6272a4&#34;&gt;-- allow time for the notification to show&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;delay&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;tell&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now this can be used in an &lt;em&gt;Automator Service&lt;/em&gt;, which you can find out how to make in the &lt;a href=&#34;https://ohdoylerules.com/snippets/copy-file-path-clipboard-osx&#34; title=&#34;Copy filepath to clipboard in OSX&#34;&gt;previous article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you modify this for any other cool node tools, please let me know!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: Keep in mind that this doesn&amp;rsquo;t iterate through multiple files. Only single files.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Copy filepath to clipboard in OSX</title>
      <link>https://ohdoylerules.com/snippets/copy-file-path-clipboard-osx/</link>
      <pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/copy-file-path-clipboard-osx/</guid>
      <description>&lt;p&gt;At &lt;a href=&#34;http://warpaintmedia.ca&#34; title=&#34;WARPAINT Media&#34;&gt;WARPAINT&lt;/a&gt;, we use &lt;a href=&#34;https://www.dropbox.com&#34; title=&#34;Dropbox Homepage&#34;&gt;Dropbox&lt;/a&gt; for collaborating on our files. This is awesome, but a lot of the times you get some pretty nasty file paths. Especially when you are trying to guide someone to a place where you saved a file.&lt;/p&gt;
&lt;p&gt;I wanted to solve this problem by creating an AppleScript service that would allow everyone to &lt;strong&gt;Copy the selected file&amp;rsquo;s path to the clipboard&lt;/strong&gt;. Here is how I did it.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We are going to be using &lt;a href=&#34;http://en.wikipedia.org/wiki/Automator_(software)&#34;&gt;Automator&lt;/a&gt; to create a new service. Here is the description of Automator in case you don&amp;rsquo;t know what it is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Automator is an application developed by Apple Inc. for OS X that implements point-and-click (or drag and drop) creation of workflows for automating repetitive tasks into batches for quicker alteration, thus saving time and effort over human intervention to manually change each file separately.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the first thing is to open Automator and create a new service. Like so:&lt;/p&gt;
&lt;div class=&#34;center&#34;&gt;
  &lt;a href=&#34;https://ohdoylerules.com/images/clipboard-1.png&#34; target=&#34;_blank&#34; &gt;
    &lt;img src=&#34;https://ohdoylerules.com/images/clipboard-1.png&#34; width=&#34;720&#34; /&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Then you need to select &lt;code&gt;files or folders&lt;/code&gt; for &amp;ldquo;Service receives selected&amp;rdquo; and choose &lt;code&gt;Finder.app&lt;/code&gt; for the second option. The do a search for &lt;code&gt;applescript&lt;/code&gt; and drag the &lt;code&gt;Run AppleScript&lt;/code&gt; choice into the window on the right.&lt;/p&gt;
&lt;p&gt;You will need to paste the following code into the AppleScript window:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-applescript&#34; data-lang=&#34;applescript&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tell&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;application&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Finder&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;sel&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;selection&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;as &lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;text&lt;/span&gt;
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;set the clipboard to&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;POSIX&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;sel&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;tell&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When that is all done, it should look something like this.&lt;/p&gt;
&lt;div class=&#34;center&#34;&gt;
  &lt;a href=&#34;https://ohdoylerules.com/images/clipboard-2.png&#34; target=&#34;_blank&#34; &gt;
    &lt;img src=&#34;https://ohdoylerules.com/images/clipboard-2.png&#34; width=&#34;720&#34; /&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Go to &lt;code&gt;File &amp;gt; Save&lt;/code&gt; or press &lt;code&gt;⌘S&lt;/code&gt;. &lt;strong&gt;Do not Save-As&lt;/strong&gt;. Enter in &lt;code&gt;Copy Path To Clipboard&lt;/code&gt; as the name. &lt;em&gt;It shouldn&amp;rsquo;t ask for a location&lt;/em&gt;, it will just show an input field. This is perfectly fine.&lt;/p&gt;
&lt;p&gt;Now open a new finder window and go to &lt;code&gt;Finder &amp;gt; Services &amp;gt; Services Preferences...&lt;/code&gt; or &lt;code&gt;System Preferences &amp;gt; Keyboard &amp;gt; Shortcuts&lt;/code&gt;. Select services on the left menu if it isn&amp;rsquo;t already and scroll down to find &lt;code&gt;Copy Path To Clipboard&lt;/code&gt;. This will open a window like this:&lt;/p&gt;
&lt;div class=&#34;center&#34;&gt;
  &lt;a href=&#34;https://ohdoylerules.com/images/clipboard-3.png&#34; target=&#34;_blank&#34; &gt;
    &lt;img src=&#34;https://ohdoylerules.com/images/clipboard-3.png&#34; width=&#34;720&#34; /&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Click on that item and make sure it is checked off, it should be by default. Then add a shortcut by clicking on the right side where it says &amp;ldquo;add shortcut&amp;rdquo;. I made mine &lt;code&gt;⌃⌘\&lt;/code&gt;. But if you have &lt;a href=&#34;http://www.alfredapp.com/&#34;&gt;Alfred.app&lt;/a&gt; that might conflict with it&amp;rsquo;s copy feature. So you choose.&lt;/p&gt;
&lt;div class=&#34;center&#34;&gt;
  &lt;a href=&#34;https://ohdoylerules.com/images/clipboard-4.png&#34; target=&#34;_blank&#34; &gt;
    &lt;img src=&#34;https://ohdoylerules.com/images/clipboard-4.png&#34; width=&#34;720&#34; /&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;You can use these steps to run any AppleScript on a file you choose. Pretty slick!&lt;/p&gt;
&lt;p&gt;Now when you have a file of folder selected in the Finder, you can right-click, go to Services, and select &lt;code&gt;Copy Path To Clipboard&lt;/code&gt;!&lt;/p&gt;
&lt;div class=&#34;center&#34;&gt;
  &lt;a href=&#34;https://ohdoylerules.com/images/clipboard-5.png&#34; target=&#34;_blank&#34; &gt;
    &lt;img src=&#34;https://ohdoylerules.com/images/clipboard-5.png&#34; width=&#34;646&#34; /&gt;
  &lt;/a&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Purge A File From A Github Repo</title>
      <link>https://ohdoylerules.com/snippets/purge-file-from-github/</link>
      <pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/purge-file-from-github/</guid>
      <description>&lt;p&gt;Ever wanted to permanently remove a file from a repo and it&amp;rsquo;s history?&lt;/p&gt;
&lt;p&gt;Add this snippet to the end of your &lt;code&gt;.bashrc&lt;/code&gt; (or &lt;code&gt;.zshrc&lt;/code&gt; if you are a cool guy developer):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# remove a file from the repo and from the history&lt;/span&gt;
git-purge&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;FN&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;git rm --cached --ignore-unmatch &lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;
  git filter-branch --force --index-filter &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$FN&lt;/span&gt; --prune-empty --tag-name-filter cat -- --all
&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This was taken from the &lt;a href=&#34;https://help.github.com/articles/remove-sensitive-data&#34; title=&#34;Github - Remove Sensitive Data&#34;&gt;Github article about removing files&lt;/a&gt;. Here is what they said about the function:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Run git filter-branch, forcing (&amp;ndash;force) Git to process—but not check out (&amp;ndash;index-filter)—the entire history of every branch and tag (&amp;ndash;tag-name-filter cat &amp;ndash; &amp;ndash;all), removing the specified file (&amp;lsquo;git rm &amp;ndash;cached &amp;ndash;ignore-unmatch MYFILE&amp;rsquo;) and any empty commits generated as a result (&amp;ndash;prune-empty). Note that you need to specify the path to the file you want to remove, not just its filename. Be careful! This will overwrite your existing tags.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You should also add the file to your &lt;code&gt;.gitignore&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MYFILE&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; .gitignore
git add .gitignore
git commit -m &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Add MYFILE to .gitignore&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then to update the live repo, run &lt;code&gt;git push origin master --force&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This process will remove the file from your repo, and from the history. This is in-case you committed a sensitive file. If you get in a real pickle, you can use the &lt;a href=&#34;http://rtyley.github.io/bfg-repo-cleaner/&#34; title=&#34;BFG Repo-Cleaner&#34;&gt;BFG Repo-Cleaner&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bash select example</title>
      <link>https://ohdoylerules.com/snippets/bash-select-example/</link>
      <pubDate>Mon, 07 Apr 2014 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/bash-select-example/</guid>
      <description>&lt;p&gt;I recently bought 2 &lt;a href=&#34;http://raspberrypi.org&#34;&gt;raspberry pi computers&lt;/a&gt;. One is for home, and one is for the office.&lt;/p&gt;
&lt;p&gt;Since we have dynamic IPs setup in the office, and I have the same at my house, I needed to be able to connect using the MAC address of the pi. I ended up writing a little script to get the IP based on the MAC Address, and then ssh into the computer. Pretty slick.&lt;/p&gt;
&lt;p&gt;To make my life easier I used the &lt;code&gt;select&lt;/code&gt; command in bash. The &lt;a href=&#34;http://www.gnu.org/software/bash/manual/bashref.html#Conditional-Constructs&#34;&gt;documentation for select&lt;/a&gt; leaves a lot to be desired. So I had to fiddle with it until I got it right. Here is a simple boilerplate for a bash script using select:&lt;/p&gt;
&lt;h4 id=&#34;function&#34;&gt;Function&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;
speak&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$2&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;
  break; &lt;span style=&#34;color:#6272a4&#34;&gt;# we are done&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;What do you want me to say?&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;select&lt;/span&gt; ab in &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Bonjour&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$ab&lt;/span&gt; in
    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; speak &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;my friend&amp;#34;&lt;/span&gt;;;
    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Bonjour&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; speak &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Bonjour&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mon ami&amp;#34;&lt;/span&gt;;;
    *&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;invalid option&amp;#34;&lt;/span&gt;;; &lt;span style=&#34;color:#6272a4&#34;&gt;# you picked anything but 1 or 2&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;esac&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save that in a file called &lt;code&gt;say-hello.sh&lt;/code&gt; and change the rights to allow execution by using &lt;code&gt;chmod +x say-hello.sh&lt;/code&gt;. Then you can run it:&lt;/p&gt;
&lt;h4 id=&#34;output&#34;&gt;Output:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ ./say-hello.sh
  1) Hello
  2) Bonjour
  #? 1
  Hello my friend
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can see that in this example I push &lt;code&gt;1&lt;/code&gt;. If I run it again and push &lt;code&gt;2&lt;/code&gt;, you will see the French words show up.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Randomly Generate A Password In Bash</title>
      <link>https://ohdoylerules.com/snippets/bash-random-password-generation/</link>
      <pubDate>Sun, 16 Feb 2014 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/bash-random-password-generation/</guid>
      <description>&lt;p&gt;When installing or setting up frameworks, in this case I was playing around with &lt;a href=&#34;http://laravel.com/&#34;&gt;Laravel&lt;/a&gt;, you usually need to set a session/secret/encryption key.&lt;/p&gt;
&lt;p&gt;I know why this is, but I always end up looking around for some random password generator so I can get a random string that is exactly 32 characters. Isn&amp;rsquo;t there an easier way?!?!&lt;/p&gt;
&lt;p&gt;Yes there is. If you have the magical &lt;a href=&#34;https://www.openssl.org/&#34; title=&#34;OpenSSL Website&#34;&gt;OpenSSL&lt;/a&gt; installed, which most do, you can use it to generate a random string.&lt;/p&gt;
&lt;p&gt;I found a &lt;a href=&#34;http://osxdaily.com/2011/05/10/generate-random-passwords-command-line/&#34; title=&#34;Generate Random Passwords from the Command Line&#34;&gt;article online&lt;/a&gt; that uses base64 to generate a string of a certain length. The only thing is that base64 is padded with 8 bits. Which means that if you want 32 then you need to use 24. This goes up exponentially as the number gets bigger. So there is a trim part of the function that clips off the extra characters.&lt;/p&gt;
&lt;p&gt;Here is the function broken down into steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pass a number to the function&lt;/li&gt;
&lt;li&gt;cut the resulting string&lt;/li&gt;
&lt;li&gt;generate a base64 string using that number&lt;/li&gt;
&lt;li&gt;echo out the result&lt;/li&gt;
&lt;li&gt;copy the output to the clipboard with a newline&lt;/li&gt;
&lt;li&gt;echo out a success&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I put a check in there if the argument is not a number. This is just for the dummies out there.&lt;/p&gt;
&lt;h4 id=&#34;pbcopy-is-not-defined&#34;&gt;pbcopy is not defined&lt;/h4&gt;
&lt;p&gt;You are probably on Linux. I found &lt;a href=&#34;http://whereswalden.com/2009/10/23/pbcopy-and-pbpaste-for-linux/&#34; title=&#34;pbcopy and pbpaste for Linux&#34;&gt;this little snippet&lt;/a&gt; for the lazy. This way you can forget about translating it each time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;pbcopy&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xsel --clipboard --input&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;pbpaste&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xsel --clipboard --output&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now for the actual shell function:&lt;/p&gt;
&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# if the argument is a number&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# cut the string so that there is no base64 padding&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# generate a random password of the specified length&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# then copy it to the clipboard without a newline&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# usage: password 32&lt;/span&gt;
password&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;LENGTH&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;REGEX&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;^[0-9]+$&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$LENGTH&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;~ &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$REGEX&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;]]&lt;/span&gt; ; &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;PASSWD&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;openssl rand -base64 &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$LENGTH&lt;/span&gt; | head -c&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$LENGTH&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$PASSWD&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$PASSWD&lt;/span&gt; | tr -d &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; | pbcopy
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Password copied to clipboard&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Argument must be a number&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is how you would use it, and what the results would look like:&lt;/p&gt;
&lt;h3 id=&#34;output&#34;&gt;Output&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;~ ❯ password &lt;span style=&#34;color:#bd93f9&#34;&gt;32&lt;/span&gt;
gY4zLES+WWF5+iNWo0FYx+os6EmDwecf
Password copied to clipboard
~ ❯ password fu
Argument must be a number
~ ❯
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function would be put in your &lt;code&gt;.bashrc&lt;/code&gt; file, or you &lt;code&gt;.zshrc&lt;/code&gt; file if you are a cool ZSH user.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>List File Permission Numbers</title>
      <link>https://ohdoylerules.com/snippets/list-file-permission-numbers/</link>
      <pubDate>Sun, 08 Dec 2013 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/list-file-permission-numbers/</guid>
      <description>&lt;p&gt;I wanted to see the chmod numbers for the files in a directory. So I can copy them to the other files. Since I don&amp;rsquo;t want to do that dumb chmod math, I looked for a way to do it easily.&lt;/p&gt;
&lt;p&gt;I found the following code:&lt;/p&gt;
&lt;h4 id=&#34;function&#34;&gt;Function&lt;/h4&gt;
&lt;p&gt;Add the following to your .bashrc (or .zshrc file if you are cool) and then reload the source of your terminal.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; show-permissions&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
  ls -l | awk &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;{k=0;for(i=0;i&amp;lt;=8;i++)k+=((substr($1,i+2,1)~/[rwx]/) \
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            *2^(8-i));if(k)printf(&amp;#34;%0o &amp;#34;,k);print}&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;usage&#34;&gt;Usage:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;show-permissions
644 -rw-r--r--   1 james2doyle   README.md
644 -rw-r--r--   1 james2doyle   LICENSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;greping the output&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;show-permissions | grep README.md
644 -rw-r--r--   1 james2doyle   README.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the &lt;a href=&#34;http://goo.gl/HS9Ar3&#34;&gt;stackoverflow question&lt;/a&gt; where I stole this from.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easy Command Line Reverse Geocoding</title>
      <link>https://ohdoylerules.com/snippets/easy-command-line-reverse-geocoding/</link>
      <pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/easy-command-line-reverse-geocoding/</guid>
      <description>&lt;p&gt;Using this function you can easily reverse geocode an address into a &lt;em&gt;lat and lang&lt;/em&gt; position. This uses the &lt;a href=&#34;http://stedolan.github.io/jq/&#34;&gt;jq executable&lt;/a&gt; and the &lt;a href=&#34;https://developers.google.com/maps/documentation/geocoding/#GeocodingRequests&#34;&gt;Google Maps API&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;requirements&#34;&gt;Requirements&lt;/h4&gt;
&lt;p&gt;This little snippet &lt;a href=&#34;http://stedolan.github.io/jq/&#34;&gt;requires jq to be installed&lt;/a&gt;. It is very easy to install.&lt;/p&gt;
&lt;p&gt;From the site:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jq is a lightweight and flexible command-line JSON processor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is multi-platform, so no worries for Windows users.&lt;/p&gt;
&lt;p&gt;Here is the meat:&lt;/p&gt;
&lt;h4 id=&#34;function&#34;&gt;Function&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; reverse-geocode&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#6272a4&#34;&gt;# replace spaces with + signs&lt;/span&gt;
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;STRING&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$1&lt;/span&gt; | tr &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#6272a4&#34;&gt;# save results&lt;/span&gt;
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CURLED&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;curl &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://maps.googleapis.com/maps/api/geocode/json?address=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$STRING&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;amp;sensor=true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#6272a4&#34;&gt;# save lat and lng&lt;/span&gt;
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;LANG&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$CURLED&lt;/span&gt; | jq &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.results[0].geometry.location.lng&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;LAT&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$CURLED&lt;/span&gt; | jq &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.results[0].geometry.location.lat&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#6272a4&#34;&gt;# echo them out&lt;/span&gt;
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Lat: &lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$LAT&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;, Lang: &lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$LANG&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;usage&#34;&gt;Usage:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;reverse-geocode &amp;quot;998 Oxford Street E, London ON, N5Y 3K7&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This return the curl results as well as the Lat and Lang output for the location.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Decrypt-Encrypt Functions From Command Line</title>
      <link>https://ohdoylerules.com/snippets/openssl-encrypt-decrypt-functions/</link>
      <pubDate>Fri, 22 Nov 2013 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/openssl-encrypt-decrypt-functions/</guid>
      <description>&lt;h3 id=&#34;preamble&#34;&gt;Preamble&lt;/h3&gt;
&lt;p&gt;I have been reading about encryption and security since the whole NSA/Edward Snowden thing. It is pretty intense stuff. Most of the security comes from the philosophy of &amp;ldquo;security through obfuscation&amp;rdquo;. What this means, is that you are making it extremely difficult (expensive, time-consuming) to try and look at your &amp;ldquo;stuff&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;I would suggest reading &lt;a href=&#34;http://en.wikipedia.org/wiki/Key_size&#34;&gt;this article on &amp;ldquo;Key Size&amp;rdquo;&lt;/a&gt;. This is probably my favorite quote from the article:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;With a key of length &lt;em&gt;n&lt;/em&gt; bits, there are &lt;em&gt;2n&lt;/em&gt; possible keys. This number grows very rapidly as &lt;em&gt;n&lt;/em&gt; increases. Moore&amp;rsquo;s law suggests that computing power doubles roughly every 18 to 24 months, but even this doubling effect leaves the larger symmetric key lengths currently considered acceptable well out of reach.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The best thing you can do for this type of encryption is &lt;a href=&#34;https://tech.dropbox.com/2012/04/zxcvbn-realistic-password-strength-estimation/&#34;&gt;pick a good password&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# take in a file and output an encrypted one&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; encrypt&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#6272a4&#34;&gt;# take in a file and output a new one with a `.enc` extension&lt;/span&gt;
  openssl rc4 -in &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt; -out &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;.enc
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;.enc created&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#6272a4&#34;&gt;# reverse of encrypt()&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; decrypt&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;FILENAME&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# save the old filename&lt;/span&gt;
  &lt;span style=&#34;color:#6272a4&#34;&gt;# decrypt the file and save it to a file with no `.enc` extension&lt;/span&gt;
  openssl rc4 -d -in &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt; -out &lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;FILENAME&lt;/span&gt;%.*&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; decrypted&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This still leave an &amp;ldquo;open&amp;rdquo; file when the file is encrypted. Remember to remove the file securely. You can use &lt;code&gt;shred&lt;/code&gt; or &lt;code&gt;gshred&lt;/code&gt; (for OSX). Here is the info from the &lt;code&gt;--help&lt;/code&gt; output of gshred:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Overwrite the specified FILE(s) repeatedly, in order to make it harder
for even very expensive hardware probing to recover the data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is the function that I found to be pretty good:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# overwrite &amp;#39;my-unsafe-file.txt&amp;#39; 3 times, with zeros (nulls) and then remove the file&lt;/span&gt;
gshred --iterations&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; --zero --remove my-unsafe-file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note: I used RC4 instead of 3DES because it is faster (95% slower than RC4), but it is not as secure.&lt;/p&gt;
&lt;h4 id=&#34;references&#34;&gt;References:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://osxdaily.com/2012/01/30/encrypt-and-decrypt-files-with-openssl/&#34;&gt;Encrypt &amp;amp; Decrypt Files from the Command Line with OpenSSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.commandlinekungfu.com/2009/05/episode-32-wiping-securely.html&#34;&gt;Wiping Securely&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zombe.es/post/4078724716/openssl-cipher-selection&#34;&gt;OpenSSL Cipher Selection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Get Wordpress via Command Line</title>
      <link>https://ohdoylerules.com/snippets/wordpress-via-command-line/</link>
      <pubDate>Thu, 21 Nov 2013 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/wordpress-via-command-line/</guid>
      <description>&lt;p&gt;All the cool kids are using the command line these days. This allows you to run quick commands and little functions that would be too tedious to run with a GUI or just clicking around.&lt;/p&gt;
&lt;p&gt;A while ago I added this little code snippet to be .bashrc file. It means I can run &lt;code&gt;download-wordpress&lt;/code&gt; in an empty folder and then it will go and grab the latest archive, unzip it, and remove the junk.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;download-wordpress &lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
  wget http://wordpress.org/latest.tar.gz &lt;span style=&#34;color:#6272a4&#34;&gt;# get wordpress&lt;/span&gt;
  tar xfz latest.tar.gz &lt;span style=&#34;color:#6272a4&#34;&gt;# unzip the archive&lt;/span&gt;
  mv wordpress/* ./ &lt;span style=&#34;color:#6272a4&#34;&gt;# move the files to the root of this directory&lt;/span&gt;
  rmdir ./wordpress/ &lt;span style=&#34;color:#6272a4&#34;&gt;# delete the empty directory&lt;/span&gt;
  rm -f latest.tar.gz &lt;span style=&#34;color:#6272a4&#34;&gt;# delete the archive&lt;/span&gt;
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;wordpress installed&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# let me know we are done&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a handy function. You can really use it for any CMS or Zip file you have to grab on the regular. Just remember to run this in an &lt;em&gt;empty directory&lt;/em&gt;, or it will overwrite everything and it will make a huge mess.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HostMonster PHPMailer Settings</title>
      <link>https://ohdoylerules.com/snippets/hostmonster-phpmailer/</link>
      <pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/hostmonster-phpmailer/</guid>
      <description>&lt;p&gt;God Damn!! This one was a b*tch to get right. I have a small plugin for a site that makes doing AJAX contact forms a breeze.&lt;/p&gt;
&lt;p&gt;But, of course, it likes to be a pain in the ass when I am trying to set it up. Also you usually have to be on the correct domain to allow the script to send the right email. So doubly annoying.&lt;/p&gt;
&lt;p&gt;Here is the code that worked for me:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;$mail = new PHPMailer; // basic class declaration
$mail-&amp;gt;isSMTP(); // duh!
$mail-&amp;gt;SMTPDebug = 0; // no debug
$mail-&amp;gt;SMTPAuth = true; // yes to auth please
$mail-&amp;gt;Port = 26; // nope not port 25, 26!!
$mail-&amp;gt;Host = &amp;#39;host286.hostmonster.com&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now your host may differ. I used &lt;a href=&#34;http://mxtoolbox.com/&#34;&gt;this tool&lt;/a&gt; to check the MX records for the domain. After the check is complete, you will see a small table showing the hostname, IP address, TTL, and some links. &lt;strong&gt;Click &amp;ldquo;SMTP Test&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Once that text completes, you will see another table. The first result is the &amp;ldquo;SMTP Reverse Banner Check&amp;rdquo;. Copy the hostname, which is the domain in that value field.&lt;/p&gt;
&lt;p&gt;Hopefully this works for you. I had a hell of a time getting the correct settings. &lt;em&gt;My pain is your gain&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>compare multiple md5 hashes</title>
      <link>https://ohdoylerules.com/snippets/compare-multiple-md5-hashes/</link>
      <pubDate>Sun, 15 Sep 2013 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/compare-multiple-md5-hashes/</guid>
      <description>&lt;p&gt;Sometimes you need to check a file against a &lt;code&gt;md5&lt;/code&gt; hash. This can be annoying. Just look at this output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# command&lt;/span&gt;
md5 file.xml ~/Downloads/file.xml file2.xml

&lt;span style=&#34;color:#6272a4&#34;&gt;# output&lt;/span&gt;
MD5 &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;file.xml&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; 389a537b7443108f610038b4e4dd549a
MD5 &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;/Users/james2doyle/Downloads/file.xml&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; 389a537b7443108f610038b4e4dd549a
MD5 &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;file.xml&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; 389a537b7443108f610038b4e4dd549a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Well it would be nice to not see all that junk in front of the hash. If they were lined up then it would be easier to compare them. Like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# command&lt;/span&gt;
md5-check file.xml ~/Downloads/file.xml file2.xml

&lt;span style=&#34;color:#6272a4&#34;&gt;# output&lt;/span&gt;
389a537b7443108f610038b4e4dd549a
389a537b7443108f610038b4e4dd549a
389a537b7443108f610038b4e4dd549a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Better. Here is the &lt;code&gt;md5-check&lt;/code&gt; function I wrote to take an array of arguments and then trim out all the garabage.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt; md5-check&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; ARG in &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$@&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;temp&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;md5 &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$ARG&lt;/span&gt; | cut -d&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt; -f2&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$temp&lt;/span&gt; | tr -d &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;done&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is also good for saving the output of a md5 hash:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# output into file&lt;/span&gt;
md5-check Downloads/logo.jpg | &amp;gt; check.md5

&lt;span style=&#34;color:#6272a4&#34;&gt;# check the contents of the check.md5 file&lt;/span&gt;
cat check.md5
6ed200ea7afa42e3bd90010fb14b06fd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or you can read the file contents and compare it to the file&amp;rsquo;s md5 hash:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;md5-check Downloads/logo.jpg &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cat check.md5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;this would output like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;6ed200ea7afa42e3bd90010fb14b06fd
6ed200ea7afa42e3bd90010fb14b06fd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems a bit easier to compare the results of the hashes. Although I never really use them, I think it makes sense when you are transfering large files or you are downloading files in chunks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Render PHP File With Data</title>
      <link>https://ohdoylerules.com/snippets/render-php-with-data/</link>
      <pubDate>Thu, 29 Aug 2013 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/render-php-with-data/</guid>
      <description>&lt;p&gt;I am modifying an open source CMS to use the &lt;a href=&#34;phalconphp.com/en/&#34; title=&#34;Phalcon PHP Framework&#34;&gt;Phalcon PHP framework&lt;/a&gt;, as well as the &lt;a href=&#34;https://github.com/chobie/php-sundown&#34; title=&#34;PHP-Sundown&#34;&gt;PHP-Sundown&lt;/a&gt; C implimentation of Markdown.&lt;/p&gt;
&lt;p&gt;It is a very simple CMS which previously would just echo out compiled HTML. But I am using the Volt template engine in Phalcon. It renders &lt;code&gt;.volt&lt;/code&gt; files to native PHP. This means that I cannot just spit out raw HTML. I need to create a render function that passes an array of data to my PHP file.&lt;/p&gt;
&lt;p&gt;Here is that function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;function renderPhpFile($filename, $vars = null) {
  if (is_array($vars) &amp;amp;&amp;amp; !empty($vars)) {
    extract($vars);
  }
  ob_start();
  include $filename;
  return ob_get_clean();
}
// usage
echo renderPhpFile(&amp;#39;views/templates/index.php&amp;#39;, $view_data);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works! It is a handy little function for passing data into a PHP file.&lt;/p&gt;
&lt;p&gt;If you wanted to use an object, you would need to cast it to an array first.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple HTML5 Notifications</title>
      <link>https://ohdoylerules.com/snippets/simple-html5-notification/</link>
      <pubDate>Thu, 29 Aug 2013 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/simple-html5-notification/</guid>
      <description>&lt;p&gt;I was playing around with HTML5 Notifications the other day. They are pretty slick! It allows you to essentially send growl notifications to your desktop from the browser.&lt;/p&gt;
&lt;p&gt;This little function would be used during an event to request permission for notifications and then display it with a simple abstraction of the native API.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; notify(title, body, timeout) {
  timeout &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (timeout) &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; timeout &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3000&lt;/span&gt;;
  Notification.requestPermission(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; nf &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Notification(title, {
      body&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; body,
      iconUrl&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test.png&amp;#34;&lt;/span&gt;
    });
    nf.onshow &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
      setTimeout(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
        nf.close()
      }, timeout)
    };
  });
}
&lt;span style=&#34;color:#6272a4&#34;&gt;// usage
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;notify(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;My Title&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;My hot body with a bunch of lorem in it&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It will then ask for permission, if your page doesn&amp;rsquo;t have it already, then show the notification. Right now it just shows a small grey box for the test image.&lt;/p&gt;
&lt;p&gt;The last parameter is for a custom timeout. I like the default of 3 seconds but if you need to you can override it without modifying the function.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apax apache theme in htdocs</title>
      <link>https://ohdoylerules.com/snippets/apax-in-htdocs/</link>
      <pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/apax-in-htdocs/</guid>
      <description>&lt;p&gt;I was tired of looking at the ugly default no-style of the htdocs file listing. I had seen &lt;a href=&#34;http://adamwhitcroft.com/apaxy/&#34; title=&#34;Apaxy Homepage&#34;&gt;Apaxy theme&lt;/a&gt; before and thought it was really nice. But I couldn&amp;rsquo;t figure out how to get it to work with the default htdocs MAMP folder. I tried again tonight, and I got it working without much hassle.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AdamWhitcroft/Apaxy/archive/master.zip&#34; title=&#34;Apaxy Download Link&#34;&gt;Download Apaxy&lt;/a&gt; and move everything from the apaxy folder into your MAMP htdocs folder.&lt;/li&gt;
&lt;li&gt;open &amp;ldquo;htaccess.txt&amp;rdquo; and replace &amp;ldquo;/{FOLDERNAME}/theme&amp;rdquo; with &amp;ldquo;/.theme/&amp;rdquo;&lt;/li&gt;
&lt;li&gt;rename the &amp;ldquo;htaccess.txt&amp;rdquo; file to &amp;ldquo;.htaccess&amp;rdquo; which will hide the file&lt;/li&gt;
&lt;li&gt;rename the &amp;ldquo;theme&amp;rdquo; folder to &amp;ldquo;.theme&amp;rdquo; which will hide the directory&lt;/li&gt;
&lt;li&gt;go to your localhost url and refresh&lt;/li&gt;
&lt;li&gt;enjoy a not-ugly page&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you can edit the files in the &amp;ldquo;.theme&amp;rdquo; folder and style your page. I changed the &amp;ldquo;.wrapper&amp;rdquo; to have no max-width or margin, this way it was full screen.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ohdoylerules.com/images/Screen-Shot-2013-07-02-at-12.38.08-AM.png&#34;&gt;&lt;img src=&#34;https://ohdoylerules.com/images/Screen-Shot-2013-07-02-at-12.38.08-AM.png&#34; alt=&#34;apaxy theme applied to htdocs&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Above is a screenshot of what my htdocs/localhost:8888 now looks like.&lt;/p&gt;
&lt;h4 id=&#34;optional&#34;&gt;OPTIONAL&lt;/h4&gt;
&lt;p&gt;You can also hide the &amp;ldquo;.theme&amp;rdquo; folder. You will see a section that looks
like this, in your .htaccess file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# HIDE /theme DIRECTORY
IndexIgnore .htaccess /.theme
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The old version should read &amp;ldquo;/theme&amp;rdquo; and not &amp;ldquo;/.theme&amp;rdquo;. If change this
line, it will NOT show the .theme folder in the localhost listing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>grunt terminal-notifier setup</title>
      <link>https://ohdoylerules.com/snippets/grunt-terminal-notifier-setup/</link>
      <pubDate>Fri, 07 Jun 2013 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/grunt-terminal-notifier-setup/</guid>
      <description>&lt;p&gt;I just downloaded the new Mountain Lion, finally. One of the biggest new things is the cool little native notifications akin to growl. I thought it would be cool to get a nice notification when my &amp;ldquo;grunt watch&amp;rdquo; task finished. First things first. You need to install &lt;a href=&#34;https://github.com/alloy/terminal-notifier&#34; title=&#34;alloy/terminal notifier&#34;&gt;terminal-notifier&lt;/a&gt;. This allows you to interact with the native OSX notifications system.&lt;/p&gt;
&lt;p&gt;There is a ruby gem and a standalone &amp;ldquo;.app&amp;rdquo;. Once this is installed, you will need to grab the &lt;a href=&#34;https://github.com/alextucker/grunt-growl&#34; title=&#34;alextucker/grunt-growl&#34;&gt;grunt-growl&lt;/a&gt; plugin. There are more instructions there for the terminal-notifier app. Now you will need to setup a new task in your gruntfile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;growl&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
  css&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
    title&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;STYLUS BUILT&amp;#39;&lt;/span&gt;,
    message&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;css/style.css has been created&amp;#39;&lt;/span&gt;
  },
  js&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
    title&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;JAVASCRIPT BUILT&amp;#39;&lt;/span&gt;,
    message&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;dist/js/scripts.js has been created&amp;#39;&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now my watch task looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;watch&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
  scripts&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
    files&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;%= concat.dist.src %&amp;gt;&amp;#39;&lt;/span&gt;],
    tasks&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;jshint&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;concat&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;growl:js&amp;#39;&lt;/span&gt;],
    options&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {}
  },
  styles&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
    files&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;css/*.styl&amp;#39;&lt;/span&gt;],
    tasks&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;stylus&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;growl:css&amp;#39;&lt;/span&gt;],
    options&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {}
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see that the growl task runs after the initial stylus and javascript watch tasks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Detect Animation Events in Javascript</title>
      <link>https://ohdoylerules.com/snippets/animation-events-in-javascript/</link>
      <pubDate>Fri, 31 May 2013 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/animation-events-in-javascript/</guid>
      <description>&lt;p&gt;Whenever I am doing animations that have javascript and CSS, most of the time, I want an callback to fire in javascript when the animations are complete. I have used this event for modals and little UI plugins. Normally, I would have a start event(click or touch) that just adds a class that has a CSS animation attached to it. Lets say we have a class called &amp;lsquo;on&amp;rsquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;modal&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;on&lt;/span&gt; {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;animation&lt;/span&gt;: showModal &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;ease&lt;/span&gt;;
}
@&lt;span style=&#34;color:#ff79c6&#34;&gt;keyframes&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;showModal&lt;/span&gt; {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;opacity&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#ff79c6&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;opacity&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So now in javascript I might have a button click that adds &amp;lsquo;on&amp;rsquo; to my modal. In my javascript I would have a function to detect different animation events(start, iterate and end). Here is the code that I modified from a &lt;a href=&#34;http://www.sitepoint.com/css3-animation-javascript-event-handlers/&#34; title=&#34;Sitepoint&#34;&gt;SitePoint Article&lt;/a&gt; that was posting about the same topic.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; pfx &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;webkit&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;moz&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;];
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; doAnim(element, animClass, type, callback) {
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; p &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;, l &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; pfx.length;
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; removeAndCall(){
    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.removeEventListener(pfx[p]&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;type, arguments.callee,&lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;);
    callback();
  }
  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (; p &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; l; p&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;pfx[p]) {
      type &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; type.toLowerCase();
    }
    element.classList.add(animClass);
    element.addEventListener(pfx[p]&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;type, removeAndCall, &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;);
  }
}
&lt;span style=&#34;color:#6272a4&#34;&gt;// doAnim(elem, &amp;#39;show&amp;#39;, &amp;#39;AnimationEnd&amp;#39;, function(){
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//   this function will fire when the animation is finished
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//   elem.classList.remove(&amp;#39;show&amp;#39;);
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// });
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this particular example I would do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;doAnim(myModalElement, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;on&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;AnimationEnd&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){
  &lt;span style=&#34;color:#6272a4&#34;&gt;// this function will fire when the animation is finished
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  myModalElement.classList.remove(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;on&amp;#39;&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So now I have a function that will add a class to an element and then fire my callback when the animation is complete.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modernizr SVG Fallback to PNG</title>
      <link>https://ohdoylerules.com/snippets/modernizr-svg-fallback-to-png/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/modernizr-svg-fallback-to-png/</guid>
      <description>&lt;div class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://ohdoylerules.com/images/githubgistlogo.png&#34; alt=&#34;Github Gists Logo&#34;&gt;
&lt;/div&gt;
&lt;p&gt;I have been building a small project boilerplate for when I am starting new projects. I wrote this small snippet based on &lt;a href=&#34;http://toddmotto.com/mastering-svg-use-for-a-retina-web-fallbacks-with-png-script/&#34; title=&#34;Todd Motto - mastering-svg-use-for-a-retina-web-fallbacks-with-png-script&#34;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The only changes I made were wrapping it in a closure and combining all the vars to make it smaller. Of course your minifier would do this anyway unless you are using it inline after including Modernizr.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/james2doyle/5659710&#34; title=&#34;modernizr-svg-replace.js&#34;&gt;Here is the gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or you can copy the current version from right here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;Modernizr.svg) {
  &lt;span style=&#34;color:#6272a4&#34;&gt;// wrap this in a closure to not expose any conflicts
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// grab all images. getElementsByTagName works with IE5.5 and up
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; imgs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;img&amp;#39;&lt;/span&gt;),endsWithDotSvg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;/.*\.svg$/&lt;/span&gt;,i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;,l &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; imgs.length;
    &lt;span style=&#34;color:#6272a4&#34;&gt;// quick for loop
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; l; &lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;i) {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(imgs[i].src.match(endsWithDotSvg)) {
        &lt;span style=&#34;color:#6272a4&#34;&gt;// replace the png suffix with the svg one
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        imgs[i].src &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; imgs[i].src.slice(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;png&amp;#39;&lt;/span&gt;;
      }
    }
  })();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>jQuery Plugin Snippets for Sublime Text 2</title>
      <link>https://ohdoylerules.com/snippets/jquery-plugin-snippets/</link>
      <pubDate>Thu, 28 Mar 2013 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/jquery-plugin-snippets/</guid>
      <description>&lt;div class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://ohdoylerules.com/images/jquery.png&#34; alt=&#34;jquery logo&#34;&gt;
&lt;/div&gt;
&lt;p&gt;I created a &lt;a href=&#34;https://github.com/james2doyle/jquery-plugin-snippets&#34; title=&#34;james2doyle/jquery-plugin-snippets&#34;&gt;bunch of snippets&lt;/a&gt; out of the patterns from &lt;a href=&#34;https://github.com/shichuan/javascript-patterns/tree/master/jquery-plugin-patterns&#34; title=&#34;shichuan javascript patterns&#34;&gt;shichuans javascript patterns repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These are for &lt;a href=&#34;http://www.sublimetext.com/&#34; title=&#34;sublime text site&#34;&gt;Sublime Text 2&lt;/a&gt; which everyone knows. You just clone the repo into the packages directory and they magically appear. If you don’t use sublime text…&lt;/p&gt;
&lt;div class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://ohdoylerules.com/images/yunost2.jpg&#34; alt=&#34;y u no use sublime text 2&#34;&gt;
&lt;/div&gt;
&lt;p&gt;I had to create that image because it didn’t exists for some reason.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/james2doyle/jquery-plugin-snippets&#34; title=&#34;james2doyle/jquery-plugin-snippets&#34;&gt;Github Linky&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WYSIWYG in PyroCMS Widgets</title>
      <link>https://ohdoylerules.com/snippets/wysiwyg-in-pyrocms-widgets/</link>
      <pubDate>Sat, 10 Nov 2012 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/wysiwyg-in-pyrocms-widgets/</guid>
      <description>&lt;p&gt;I have been working on a site that uses &lt;a href=&#34;https://www.pyrocms.com/&#34; title=&#34;PyroCMS Homepage&#34;&gt;PyroCMS&lt;/a&gt;. I needed to build a custom widget that had a WYSIWYG textarea. This is what worked for me.&lt;/p&gt;
&lt;p&gt;Add this to template in the constructors function.&lt;/p&gt;
&lt;h4 id=&#34;pyrocmssystemcmsmoduleswidgetscontrollersadminphp&#34;&gt;pyrocms/system/cms/modules/widgets/controllers/admin.php&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;// my new template
$this-&amp;gt;template
-&amp;gt;set_partial(&amp;#39;shortcuts&amp;#39;, &amp;#39;admin/partials/shortcuts&amp;#39;)
-&amp;gt;append_js(&amp;#39;module::widgets.js&amp;#39;)
-&amp;gt;append_css(&amp;#39;module::widgets.css&amp;#39;)
-&amp;gt;append_metadata($this-&amp;gt;load-&amp;gt;view(&amp;#39;fragments/wysiwyg&amp;#39;, $this-&amp;gt;data, TRUE));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following javascript needs to be added to the top of your view/form.php file.&lt;/p&gt;
&lt;h4 id=&#34;widgetsmywysiwygwidgetviewsformphp&#34;&gt;/widgets/mywysiwygwidget/views/form.php&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// my self special jquery
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;($){
    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;textarea.wysiwyg-simple&amp;#39;&lt;/span&gt;).ckeditor({
    &lt;span style=&#34;color:#6272a4&#34;&gt;// this is the config for the simple wysiwyg
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    toolbar&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [
        [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Bold&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Italic&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;NumberedList&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;BulletedList&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Link&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Unlink&amp;#39;&lt;/span&gt;]
    ],
    width&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;99%&amp;#39;&lt;/span&gt;,
    height&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;,
    dialog_backgroundCoverColor&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#000&amp;#39;&lt;/span&gt;,
    defaultLanguage&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
    language&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    });
})(jQuery);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also, you need to have the wysiwyg-simple class on your textarea.&lt;/p&gt;
&lt;h4 id=&#34;widgetsmywysiwygwidgetviewsformphp-1&#34;&gt;/widgets/mywysiwygwidget/views/form.php&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;echo form_textarea(array(&amp;#39;name&amp;#39;=&amp;gt; &amp;#39;html&amp;#39;, &amp;#39;value&amp;#39; =&amp;gt; $options[&amp;#39;html&amp;#39;], &amp;#39;class&amp;#39; =&amp;gt; &amp;#39;wysiwyg-simple&amp;#39;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>zsh new file &amp;&amp; open file function</title>
      <link>https://ohdoylerules.com/snippets/zsh-new-open-function/</link>
      <pubDate>Sat, 13 Oct 2012 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/zsh-new-open-function/</guid>
      <description>&lt;p&gt;Here is a little function that I made for &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34; title=&#34;oh-my-zsh&#34;&gt;oh-my-zsh&lt;/a&gt;. I found myself constantly doing &lt;code&gt;sudo touch app.js &amp;amp;&amp;amp; open app.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What this little command does is create an empty file called &lt;code&gt;app.js&lt;/code&gt; and then opens it with whatever your default editor is.&lt;/p&gt;
&lt;h4 id=&#34;here-is-the-function&#34;&gt;Here is the function:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;# create a new file in the current directory and then open it
new () {
  sudo touch $1 &amp;amp;&amp;amp; open $1
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;how-to-use&#34;&gt;How to use:&lt;/h4&gt;
&lt;p&gt;Open your &lt;code&gt;.zshrc&lt;/code&gt; file and add this function at the bottom. If you haven&amp;rsquo;t yet, uncomment the line that adds the zshconfig alias. If you are looking for example aliases, well, there are a couple in this section. When you want to create and then open a file just type &lt;code&gt;new myfile.xxx&lt;/code&gt;. This will create the new file in the directory and then open it with whatever editor you want.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Target Mozilla-only in CSS</title>
      <link>https://ohdoylerules.com/snippets/target-mozilla-only-in-css/</link>
      <pubDate>Thu, 11 Oct 2012 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/target-mozilla-only-in-css/</guid>
      <description>&lt;p&gt;I had some issues in Firefox recently. I was building a complicated “item” in CSS and it looked great in Chrome. I got an email later saying that the sizing was all off for a bunch of things. I thought this was really strange. I went back to the CSS and Chrome and I could not see any issues.&lt;/p&gt;
&lt;p&gt;I then fired up Firefox and, yikes! There was a bunch of weird issues. This is strange because normally Chrome to Firefox translates pretty well. I was using the &lt;code&gt;::first-letter&lt;/code&gt; element and a few &lt;code&gt;::before&lt;/code&gt; elements. But somehow, someway they got messed up. Anyway, I discovered this little snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;@&lt;span style=&#34;color:#ff79c6&#34;&gt;-moz-document&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;url-prefix&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; {
  &lt;span style=&#34;color:#6272a4&#34;&gt;/* firefox only styles */&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It works. But what does it mean? The url-prefix() is a way to serve specific styles to a specific URL. In this case, I just want to target a -moz- device. &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/CSS/@document?redirectlocale=en-US&amp;amp;redirectslug=CSS%2F%40-moz-document&#34; title=&#34;MDN @Document&#34;&gt;Here is a more in depth definition&lt;/a&gt;. This worked nicely, and so it will stay into production.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>nodelist.each</title>
      <link>https://ohdoylerules.com/snippets/nodelist-each/</link>
      <pubDate>Thu, 06 Sep 2012 00:00:00 +0000</pubDate>
      <author>james2doyle@gmail.com (James Doyle)</author>
      <guid>https://ohdoylerules.com/snippets/nodelist-each/</guid>
      <description>&lt;p&gt;I was doing a project in vanilla javascript that used querySelectorAll, which returns a nodelist object. I wanted the jQuery each function so that I could add an event listener to each element. It was a school project and no jQuery allowed so I did some research and came up with this little prototype.&lt;/p&gt;
&lt;p&gt;Here is the result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Object&lt;/span&gt;.prototype.each &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(callback) {
  &lt;span style=&#34;color:#6272a4&#34;&gt;// new empty array
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [];
  &lt;span style=&#34;color:#6272a4&#34;&gt;// iterate through the nodelist
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.length; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// put the objects into the array
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    a[i] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;[i];
    &lt;span style=&#34;color:#6272a4&#34;&gt;// callback the new array
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    callback(a[i]);
  }
}
&lt;span style=&#34;color:#6272a4&#34;&gt;// USAGE
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;);
x.each(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(elem) {
    elem.style.background &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pretty cool. &lt;a href=&#34;http://jsfiddle.net/james2doyle/nrhgr/&#34; title=&#34;each prototype&#34;&gt;Here is the fiddle&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
